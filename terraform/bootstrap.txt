#cloud-config
write_files:
  # --- main post-provision script with logging ---
  - path: /usr/local/bin/postprovision.sh
    permissions: "0755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      LOG_FILE="/var/log/postprovision.log"
      mkdir -p "$(dirname "$LOG_FILE")"
      exec > >(tee -a "$LOG_FILE") 2>&1
      log(){ echo "[$(date -Is)] $*"; }
      export DEBIAN_FRONTEND=noninteractive

      log "=== Starting post-provision script ==="

      apt-get update -y || true
      dpkg --configure -a || true
      apt-get -f install -y || true
      if ! dpkg -s plymouth >/dev/null 2>&1; then
        apt-get install -y plymouth initramfs-tools || true
      fi
      update-initramfs -u || true

      apt-get install -y \
        docker.io curl git jq netcat-openbsd \
        python3 python3-dev python3-pip python3-venv \
        wireshark wireshark-common burpsuite \
        kali-desktop-xfce xrdp xorgxrdp xfce4 xfce4-goodies || true

      adduser xrdp ssl-cert || true
      echo "allowed_users=anybody" > /etc/X11/Xwrapper.config
      sed -i.bak '/^test -r \/etc\/X11\/Xsession/d;/^exec \/bin\/sh \/etc\/X11\/Xsession/d' /etc/xrdp/startwm.sh
      grep -q '^startxfce4' /etc/xrdp/startwm.sh || echo "startxfce4" >> /etc/xrdp/startwm.sh
      install -d -o labuser -g labuser /home/labuser
      echo "startxfce4" > /home/labuser/.xsession
      chown labuser:labuser /home/labuser/.xsession
      systemctl enable --now xrdp xrdp-sesman || true

      if ! command -v docker-compose >/dev/null 2>&1; then
        curl -sSL https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
        chmod 755 /usr/local/bin/docker-compose
        ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
      fi

      systemctl enable --now docker || true
      usermod -aG docker labuser || true
      for i in {1..60}; do
        systemctl is-active --quiet docker && docker info >/dev/null 2>&1 && break
        sleep 2
      done

      if ! /usr/local/go/bin/go version >/dev/null 2>&1; then
        cd /tmp
        rm -rf /usr/local/go
        wget -q https://go.dev/dl/go1.22.2.linux-amd64.tar.gz
        tar -C /usr/local -xzf go1.22.2.linux-amd64.tar.gz
        grep -q '/usr/local/go/bin' /etc/profile || echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
        grep -q '^export GOPATH=' /etc/profile   || echo 'export GOPATH=/home/labuser/go'     >> /etc/profile
        grep -q '/usr/local/go/bin' /home/labuser/.bashrc || echo 'export PATH=$PATH:/usr/local/go/bin' >> /home/labuser/.bashrc
        grep -q '^export GOPATH='  /home/labuser/.bashrc  || echo 'export GOPATH=/home/labuser/go'      >> /home/labuser/.bashrc
        chown labuser:labuser /home/labuser/.bashrc
      fi

      if [ ! -d /opt/guacamole ]; then
        git clone --depth=1 https://github.com/boschkundendienst/guacamole-docker-compose /opt/guacamole
      fi
      bash -lc 'cd /opt/guacamole && zsh ./prepare.sh && docker-compose up -d'

      wait_tcp() { local h="$1" p="$2" t="${3:-90}"; for i in $(seq 1 "$t"); do nc -z "$h" "$p" 2>/dev/null && return 0; sleep 1; done; return 1; }
      wait_http_tokens() {
        local u="$1" t="${2:-120}" code
        for i in $(seq 1 "$t"); do
          code=$(curl -ksS -o /dev/null -w '%{http_code}' -X POST "$u" \
                 -H "Content-Type: application/x-www-form-urlencoded" \
                 --data 'username=guacadmin&password=guacadmin' || true)
          case "$code" in 200|401|403) return 0;; esac
          sleep 2
        done
        return 1
      }

      HOST=$(ip r | awk '/dev eth0 proto/ {print $9; exit}')
      NGINX_HTTPS_PORT="$(docker port nginx_guacamole_compose 443/tcp | awk -F: '{print $2}' | head -n1 || true)"
      GUAC_HTTP_PORT="$(docker port guacamole_compose 8080/tcp | awk -F: '{print $2}' | head -n1 || true)"
      API_BASE=""

      if [ -n "${NGINX_HTTPS_PORT}" ]; then
        log "Waiting for nginx https://${HOST}:${NGINX_HTTPS_PORT}"
        wait_tcp "${HOST}" "${NGINX_HTTPS_PORT}" 90 || true
        if wait_http_tokens "https://${HOST}:${NGINX_HTTPS_PORT}/guacamole/api/tokens" 90; then
          API_BASE="https://${HOST}:${NGINX_HTTPS_PORT}/guacamole"
        fi
      fi

      if [ -z "${API_BASE}" ] && [ -n "${GUAC_HTTP_PORT}" ]; then
        log "Waiting for Tomcat http://127.0.0.1:${GUAC_HTTP_PORT}"
        wait_tcp 127.0.0.1 "${GUAC_HTTP_PORT}" 90 || true
        if wait_http_tokens "http://127.0.0.1:${GUAC_HTTP_PORT}/guacamole/api/tokens" 120; then
          API_BASE="http://127.0.0.1:${GUAC_HTTP_PORT}/guacamole"
        fi
      fi

      if [ -z "${API_BASE}" ]; then
        log "ERROR: Could not determine Guacamole API base URL after retries."
        docker ps -a
        exit 1
      fi
      log "Using Guacamole API base: ${API_BASE}"

      NEW_PASS='S3cur3P4ssw0rd123!'
      TOKEN_JSON=$(curl -ksS -X POST "${API_BASE}/api/tokens" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        --data 'username=guacadmin&password=guacadmin' || true)
      TOKEN_DEF=$(echo "${TOKEN_JSON}" | jq -r .authToken)
      DS=$(echo "${TOKEN_JSON}" | jq -r '.availableDataSources[0]')

      if [ -n "${TOKEN_DEF}" ] && [ "${TOKEN_DEF}" != "null" ]; then
        log "Default login worked; changing password"
        curl -ksS -X PUT "${API_BASE}/api/session/data/${DS}/users/guacadmin/password" \
          -H "Guacamole-Token: ${TOKEN_DEF}" \
          -H "Content-Type: application/json" \
          -d "$(jq -n --arg old 'guacadmin' --arg new "${NEW_PASS}" '{oldPassword:$old,newPassword:$new}')" >/dev/null || true
      else
        log "Default login failed; password may already be changed"
      fi

      TOKEN_JSON=$(curl -ksS -X POST "${API_BASE}/api/tokens" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        --data "username=guacadmin&password=${NEW_PASS}" || true)
      TOKEN=$(echo "${TOKEN_JSON}" | jq -r .authToken)
      DS=$(echo "${TOKEN_JSON}" | jq -r '.availableDataSources[0]')
      if [ -z "${TOKEN}" ] || [ "${TOKEN}" = "null" ]; then
        log "ERROR: Login with new password failed; cannot proceed to create RDP connection"
        exit 0
      fi
      log "Authenticated to Guacamole API with new password"

      for i in {1..60}; do
        ss -ltn | grep -q ':3389 ' && break
        systemctl restart xrdp || true
        sleep 5
      done

      DS=${DS:-postgresql}
      NET=$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{println $k}}{{end}}' guacd_compose | head -n1)
      GW=$(docker network inspect "${NET}" --format '{{(index .IPAM.Config 0).Gateway}}')
      [ -n "${GW}" ] && [ "${GW}" != "null" ] || GW=$(ip route | awk '/docker0/ && /src/ {print $9; exit}')
      log "Using RDP host: ${GW} (guacd network: ${NET})"

      PAYLOAD=$(jq -n --arg gw "${GW}" \
        '{
          name:"Lab Desktop",
          parentIdentifier:"ROOT",
          protocol:"rdp",
          parameters:{
            hostname:$gw, port:"3389",
            username:"labuser", password:"S3cur3P4ssw0rd123!",
            "ignore-cert":"true", security:"any",
            "enable-wallpaper":"false", "resize-method":"display-update",
            "color-depth":"24", "enable-font-smoothing":"true"
          },
          attributes:{}
        }')

      curl_json() {
        local m="$1" u="$2" d="${3:-}"
        if [ -n "$d" ]; then
          curl -ksS -H "Guacamole-Token: ${TOKEN}" -H "Content-Type: application/json" \
               -X "$m" -d "$d" "$u" -w $'\n%{http_code}'
        else
          curl -ksS -H "Guacamole-Token: ${TOKEN}" -X "$m" "$u" -w $'\n%{http_code}'
        fi
      }

      BODY_AND_CODE=$(curl_json GET "${API_BASE}/api/session/data/${DS}/connections?contains=Lab%20Desktop")
      CODE="${BODY_AND_CODE##*$'\n'}"
      BODY="${BODY_AND_CODE%$'\n'*}"
      CID=""
      if [ "${CODE}" = "200" ]; then
        CID=$(echo "${BODY}" | jq -r 'if (type=="array" and length>0 and .[0] | has("identifier")) then .[0].identifier else empty end' 2>/dev/null || true)
      else
        log "WARN: list connections returned HTTP ${CODE}"
      fi

      if [ -n "${CID}" ]; then
        log "Updating existing 'Lab Desktop' (${CID})"
        BODY_AND_CODE=$(curl_json PUT "${API_BASE}/api/session/data/${DS}/connections/${CID}" "${PAYLOAD}")
        CODE="${BODY_AND_CODE##*$'\n'}"
        [ "${CODE}" = "204" ] || log "WARN: update returned HTTP ${CODE}"
      else
        log "Creating 'Lab Desktop' connection"
        BODY_AND_CODE=$(curl_json POST "${API_BASE}/api/session/data/${DS}/connections" "${PAYLOAD}")
        CODE="${BODY_AND_CODE##*$'\n'}"
        [ "${CODE}" = "200" ] || [ "${CODE}" = "201" ] || log "WARN: create returned HTTP ${CODE}"
      fi

      log "=== Building ML-2 tool ==="
      # Build script will be executed by Terraform provisioners after files are copied
      log "Build script installed, will be executed after file provisioning"

      log "=== Post-provision script completed ==="



  - path: /opt/mltool/profiles.json
    permissions: "0644"
    content: |
      {
        "juice-mixed": {
          "mode": "mixed",
          "duration": "120s",
          "rps": 35,
          "concurrency": 40,
          "progress": "10s",
          "timeout": "10s",
          "same_ip": false,
          "juice_optimized": true,
          "log_csv": "logs/juice-mixed.csv"
        },
        "juice-scrape-burst": {
          "mode": "scrape",
          "duration": "60s",
          "burst_requests": 180,
          "burst_window": "30s",
          "same_ip": true,
          "progress": "5s",
          "timeout": "8s",
          "juice_optimized": true,
          "log_csv": "logs/juice-burst.csv"
        },
        "juice-slow-7-in-100s": {
          "mode": "slow",
          "duration": "120s",
          "slow_count": 7,
          "slow_window": "100s",
          "slow_bytes": 4096,
          "slow_interval": "1500ms",
          "same_ip": true,
          "progress": "10s",
          "timeout": "15s",
          "juice_optimized": true,
          "log_csv": "logs/juice-slow.csv"
        }
      }

  - path: /usr/local/bin/build-ml2.sh
    permissions: "0755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      echo "[build-ml2] $(date -Is) starting"
      export PATH="/usr/local/go/bin:$PATH"
      
      # Create directory first, then set permissions
      mkdir -p /opt/mltool
      chmod 755 /opt/mltool
      cd /opt/mltool
      
      # Set Go environment variables
      export GOCACHE="/tmp/go-build"
      export GOPATH="/tmp/go"
      export HOME="/root"
      
      # Build ML-2 tool (source files will be copied by Terraform provisioner)
      echo "[build-ml2] $(date -Is) Building ML-2 tool"
      
      # Create separate directory for ML-2 tool
      mkdir -p /opt/mltool/ml2
      cp /opt/mltool/ml2.go /opt/mltool/ml2/
      cd /opt/mltool/ml2
      
      # Initialize Go module for ML-2 tool
      go mod init ml2
      go mod tidy
      
      # Build the ML-2 tool
      go build -trimpath -ldflags "-s -w" -o /usr/local/bin/ml-2 .
      chmod +x /usr/local/bin/ml-2
      echo "[build-ml2] $(date -Is) ML-2 tool build complete"
      
      # Build Bots tool (source files will be copied by Terraform provisioner)
      echo "[build-ml2] $(date -Is) Building Bots tool"
      
      # Create separate directory for bots tool
      cd /opt/mltool
      mkdir -p /opt/mltool/bots
      cp /opt/mltool/bots.go /opt/mltool/bots/
      cd /opt/mltool/bots
      
      # Initialize Go module for bots tool
      go mod init bots
      go mod tidy
      
      # Build the bots tool
      go build -trimpath -ldflags "-s -w" -o /usr/local/bin/bots .
      chmod +x /usr/local/bin/bots
      echo "[build-ml2] $(date -Is) Bots tool build complete"
      
      # Build ML-Mix tool (source files will be copied by Terraform provisioner)
      echo "[build-ml2] $(date -Is) Building ML-Mix tool"
      
      # Create separate directory for ml-mix tool
      cd /opt/mltool
      mkdir -p /opt/mltool/ml-mix
      cp /opt/mltool/ml-mix.go /opt/mltool/ml-mix/
      cd /opt/mltool/ml-mix
      
      # Initialize Go module for ml-mix tool
      go mod init ml-mix
      go mod tidy
      
      # Build the ml-mix tool
      go build -trimpath -ldflags "-s -w" -o /usr/local/bin/ml-mix .
      chmod +x /usr/local/bin/ml-mix
      echo "[build-ml2] $(date -Is) ML-Mix tool build complete"
      
      # Create logs dir (used by the tool profiles)
      install -d -m 0755 /opt/mltool/logs
      
      echo "[build-ml2] $(date -Is) All tools built successfully"

  - path: /usr/local/bin/trigger-build.sh
    permissions: "0755"
    content: |
      #!/usr/bin/env bash
      echo "[trigger-build] $(date -Is) Starting build process"
      
      # Wait for Go to be available
      echo "[trigger-build] Waiting for Go installation..."
      while ! command -v go &> /dev/null; do
        echo "[trigger-build] Go not found, waiting 10 seconds..."
        sleep 10
      done
      
      echo "[trigger-build] Go found at: $(which go)"
      echo "[trigger-build] Go version: $(go version)"
      
      # Wait a bit more for system to stabilize
      sleep 5
      
      # Execute the build script
      echo "[trigger-build] Executing build script..."
      /usr/local/bin/build-ml2.sh
      
      echo "[trigger-build] Build process completed"
runcmd:
  - bash /usr/local/bin/postprovision.sh
  - bash /usr/local/bin/trigger-build.sh